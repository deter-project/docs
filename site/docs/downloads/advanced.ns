# This is an ns script that demonstrates RED queues, traffic generation and event systems.
set ns [new Simulator]                  
source tb_compat.tcl

set nodeA [$ns node]
set nodeB [$ns node]

set link0 [$ns duplex-link $nodeA $nodeB 100Mb 0ms RED]

set queue0 [[$ns link $nodeA $nodeB] queue]

      # Get access to a duplex link's queue
      set link0 [$ns duplex-link $nodeA $nodeB 500Mb 0ms DropTail]
      set q0 [$link0 set fromqueue]

      # Modifying the duplex link's parameters would use $q0 as the example below uses $queue0

$queue0 set gentle_ 0
$queue0 set red_ 0
$queue0 set queue-in-bytes_ 0
$queue0 set limit_ 50
$queue0 set maxthresh_ 15
$queue0 set thresh_ 5
$queue0 set linterm_ 10
$queue0 set q_weight_ 0.002

set n0 [$ns node]
set n1 [$ns node]
set n2 [$ns node]

set lan0 [$ns make-lan "$n0 $n1 $n2" 100Mb 0ms]

set q0 [[$ns lanlink $lan0 $n0] queue]
set q1 [[$ns lanlink $lan0 $n1] queue]
set q2 [[$ns lanlink $lan0 $n2] queue]

$q0 set limit_ 20

set udp0 [new Agent/UDP]
$ns attach-agent $nodeA $udp0

set cbr0 [new Application/Traffic/CBR]
$cbr0 set packetSize_ 500
$cbr0 set interval_ 0.005
$cbr0 attach-agent $udp0

set tcp0 [new Agent/TCP]
$ns attach-agent $nodeA $tcp0

set cbr1 [new Application/Traffic/CBR]
$cbr1 set packetSize_ 500
$cbr1 set interval_ 0.005
$cbr1 attach-agent $tcp0

set null0 [new Agent/Null]
$ns attach-agent $nodeB $null0

set null1 [new Agent/TCPSink]
$ns attach-agent $nodeB $null1

$ns connect $udp0 $null0
$ns connect $tcp0 $null1


$ns at 60.0  "$cbr0  start"
$ns at 70.0  "$link0 bandwidth 10Mb duplex"
$ns at 80.0  "$link0 delay 10ms"
$ns at 90.0  "$link0 plr 0.05"
$ns at 100.0 "$link0 down"
$ns at 110.0 "$link0 up"
$ns at 115.0 "$cbr0  stop"

$ns at 120.0 "$cbr1  start"
$ns at 130.0 "$cbr1  set packetSize_ 512"
$ns at 130.0 "$cbr1  set interval_ 0.01"
$ns at 140.0 "$link0 down"
$ns at 150.0 "$cbr1  stop"






