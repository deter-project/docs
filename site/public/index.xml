<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My New Hugo Site</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 12 Nov 2015 07:54:14 -0800</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Getting Started</title>
      <link>http://localhost:1313/WikiStart/</link>
      <pubDate>Thu, 12 Nov 2015 07:54:14 -0800</pubDate>
      
      <guid>http://localhost:1313/WikiStart/</guid>
      <description>

&lt;h1 id=&#34;getting-an-account:2482b6fa94d341223660bf6920719a55&#34;&gt;Getting an Account&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/Policy&#34;&gt;The DeterLab usage policy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/GettingStarted&#34;&gt;Registering to use DeterLab&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;getting-started:2482b6fa94d341223660bf6920719a55&#34;&gt;Getting Started&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/CoreQuickstart&#34;&gt;DeterLab Core Quickstart&lt;/a&gt; - a high level overview of DeterLab Core&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/CoreGuide&#34;&gt;DeterLab Core Guide&lt;/a&gt; - includes a basic tutorial as well as some advanced topics&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/Topologies&#34;&gt;Sample Topologies&lt;/a&gt; - Some sample topologies to help you learn NS syntax&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/UsingNodes&#34;&gt;Using Your Nodes&lt;/a&gt; - Information about accessing and using your experimental nodes&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/LegoTG&#34;&gt;Generating Traffic&lt;/a&gt; - Using the LegoTG framework to generate traffic for your experiment&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/Sharing&#34;&gt;Using Shared Materials&lt;/a&gt; - Sharing files and other elements of your experiment within DeterLab&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/CoreReference&#34;&gt;Core Reference&lt;/a&gt; - Information about system commands, nodes, image IDs, OSIDs and more&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/DETERSSH&#34;&gt;Accessing testbed nodes using SSH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/SerialConsole&#34;&gt;Using the Serial Console on testbed nodes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/Glossary&#34;&gt;Glossary&lt;/a&gt; - List of terms used throughout DeterLab&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;technical-support:2482b6fa94d341223660bf6920719a55&#34;&gt;Technical Support&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Read through &lt;a href=&#34;http://localhost:1313/FrequentlyAskedQuestions&#34;&gt;Frequently Asked Questions about DeterLab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;If you still need assistance, read &lt;a href=&#34;http://localhost:1313/GettingHelp&#34;&gt;Getting Help&lt;/a&gt; to use our support ticketing system.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: To view, search and file tickets, you must be logged in with your DeterLab testbed account.&lt;/p&gt;

&lt;h1 id=&#34;capabilities-for-experimentation:2482b6fa94d341223660bf6920719a55&#34;&gt;Capabilities for Experimentation&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/OrchestratorQuickstart&#34;&gt;Orchestration (MAGI)&lt;/a&gt; - Communications and control system for repeatable experimentation.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/ContainersQuickstart&#34;&gt;Virtualization (Containers)&lt;/a&gt; - For creating large-scale  DETER topologies that support differing degrees of fidelity in individual elements. Helpful for experiments requiring 400+ computers.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://fedd.deterlab.net/trac&#34;&gt;Federation&lt;/a&gt; - Federation architecture for creating experiments that span multiple testbeds through dynamically acquiring resources from other testbeds.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://abac.deterlab.net/&#34;&gt;Attribute-Based Access Control (ABAC)&lt;/a&gt; - Scalable authorization system used with the federation capability.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;core-reference-documentation:2482b6fa94d341223660bf6920719a55&#34;&gt;Core Reference Documentation&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Commands

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/DeterLabCommands&#34;&gt;DeterLab Shell Commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/nscommands&#34;&gt;NS Command Extensions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Architecture and Network (TBD)&lt;/li&gt;
&lt;li&gt;Nodes

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/Swapping&#34;&gt;Node Use (Swapping) Policies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/DETERSSH&#34;&gt;Accessing testbed nodes using SSH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/NodeTypes&#34;&gt;Available Node Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/NetFPGA_nodes&#34;&gt;Available NetFPGA Nodes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/SerialConsole&#34;&gt;Using the Serial Console on testbed nodes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;OS and Image IDs

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/OSImages&#34;&gt;Operating Systems supported by DETER and details about using them&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/CustomOS&#34;&gt;Custom OSIDs and Image IDs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://localhost:1313/LegacyTools&#34;&gt;Legacy Tools&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>muffin</title>
      <link>http://localhost:1313/muffin/</link>
      <pubDate>Thu, 12 Nov 2015 07:54:14 -0800</pubDate>
      
      <guid>http://localhost:1313/muffin/</guid>
      <description>

&lt;h1 id=&#34;do-you-know-the-muffin-man:011203d58357a7962857d00844f9e5f6&#34;&gt;Do you know the muffin man?&lt;/h1&gt;

&lt;h2 id=&#34;the-muffin-man:011203d58357a7962857d00844f9e5f6&#34;&gt;The muffin man?&lt;/h2&gt;

&lt;h3 id=&#34;the-muffin-man-1:011203d58357a7962857d00844f9e5f6&#34;&gt;The Muffin Man!&lt;/h3&gt;

&lt;p&gt;The muffin man is me!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/BatchStats/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/BatchStats/</guid>
      <description>&lt;p&gt;All these stats ignore class projects which are currently banned from creating batch experiments.&lt;/p&gt;

&lt;p&gt;Recent activity:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt;
select year(last_activity) as yr, month(last_activity) as mo,
       p.pid, eid
  from experiment_stats s, projects p
 where s.pid_idx = p.pid_idx and
       !p.class and batch and year(last_activity) &amp;gt;= 2009
 order by yr, mo, p.pid, eid;
+------+------+--------------+---------------+
| yr   | mo   | pid          | eid           |
+------+------+--------------+---------------+
| 2009 |    4 | T1T2         | jdemo         | 
| 2009 |    5 | SecureIED    | 32hostsmcast  | 
| 2010 |    1 | liveobjects2 | myexp1        | 
| 2010 |    3 | DeterTest    | jjh-batch     | 
| 2010 |    3 | DeterTest    | jjh-batchtest | 
| 2010 |    3 | liveobjects2 | myexp         | 
| 2010 |    3 | Panorama     | bitfuzz10-1   | 
| 2010 |    8 | SOS          | appcomm       | 
+------+------+--------------+---------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All batch, by project:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; 
select p.pid, count(*)
  from experiment_stats e, projects p
 where e.pid_idx = p.pid_idx and
       !p.class and e.batch
 group by pid order by count(*) desc;
+--------------+----------+
| pid          | count(*) |
+--------------+----------+
| ddos         |     2412 | 
| Fidran       |      134 | 
| FloodWatch   |       48 | 
| MONA         |       29 | 
| worm         |       12 | 
| emulab-ops   |       12 | 
| NSUDDOS      |       11 | 
| DeterTest    |       10 | 
| psuworm      |        8 | 
| SOS          |        6 | 
| rsgc         |        4 | 
| DIAMOND      |        3 | 
| Deter        |        2 | 
| liveobjects2 |        2 | 
| SWOON        |        2 | 
| vinci        |        1 | 
| T1T2         |        1 | 
| SecureIED    |        1 | 
| DDoSImpact   |        1 | 
| Panorama     |        1 | 
| eWorm        |        1 | 
+--------------+----------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All activity, ever:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt;
select year(last_activity) as yr, month(last_activity) as mo,
       count(*)
  from experiment_stats s, projects p
 where s.pid_idx = p.pid_idx and
       !p.class and batch
 group by yr, mo
 order by yr, mo;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: y axis is log scale
[[Image(graph.png)]]&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/AnonymityModule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/AnonymityModule/</guid>
      <description>

&lt;h1 id=&#34;introduction:49601fcc70443e8a9f263221deee393b&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;This has been created as a classroom exercise explaining and demonstrating a few different techniques in active anonymity, and intercepting and making sense of web traffic.
Throughout this exercise you will:
* Learn about various forms of anonymity and tools that can be used
* Use DETER to do the following:
   * Set up a web server in Linux
   * Set up a proxy server
   * Capture web traffic using tcpdump
   * Analyze that traffic using wireshark
* Use the knowledge gained to determine the strengths and weaknesses of these different practices and technologies&lt;/p&gt;

&lt;p&gt;Anonymity is important because it allows a user to communicate with a service or another user without fear of someone eavesdropping or figuring out their location.  When two systems communicate directly, it makes it easy for someone to figure out who is talking to who and what they are saying.  Keeping your identity hidden is important because it can keep large companies and organizations from collecting your information. Anonymity tools can help them communicate more securely. There are many tools and practices that can be used to help maintain anonymity, and this lesson covers two.&lt;/p&gt;

&lt;h2 id=&#34;proxy:49601fcc70443e8a9f263221deee393b&#34;&gt;Proxy&lt;/h2&gt;

&lt;p&gt;One method of hiding your identity would be using a proxy server which works by acting as a mediator between you and the service you are communicating with.  Proxies are used to hide web traffic from the service the user is attempting to connect to.  All the data you send and all the data you receive goes through it.  By connection through a proxy the user is able to camouflage his actual identity so that the service only sees the address of the proxy.&lt;br /&gt;
The benefits of using a proxy are
* Setting up proxies does not take long
* They do hide your traffic&lt;/p&gt;

&lt;p&gt;But there are a few drawbacks to this
* One is that it is not hard to determine that the traffic is coming through a proxy.
* Another is that the proxy is able to see both the user and the service, so it knows the identity of both parties.&lt;/p&gt;

&lt;h2 id=&#34;onion-routing-tor:49601fcc70443e8a9f263221deee393b&#34;&gt;Onion Routing &amp;amp; Tor&lt;/h2&gt;

&lt;p&gt;Another method of cloaking one&amp;rsquo;s identity is through using a program called &lt;a href=&#34;https://www.torproject.org/&#34;&gt;Tor&lt;/a&gt;  Tor takes the proxy idea and expands it using the idea of onion routing.  Onion routing is an anonymity tool which uses multiple routers to hide web traffic from the sender to the server. The web data is encrypted using layers, with each layer being removed at the subsequent routers. This means that each router can only see two parts of the traffic, the preceding node and the next node. Therefore a compromised node would not lead to the identity of either person being revealed.&lt;/p&gt;

&lt;p&gt;[[Image(onion.png)]]
This image was obtained from &lt;a href=&#34;http://en.wikipedia.org/wiki/File:Onion&#34;&gt;http://en.wikipedia.org/wiki/File:Onion&lt;/a&gt; diagram.svg&lt;/p&gt;

&lt;p&gt;For this exercise, we are going to set up a network with 11 different nodes.  2 nodes will be client nodes, Alice and Bob, which will be making HTTP requests from 2 other nodes, Server1 and Server2, which will be running Apache2.  There will be a proxy node running tinyproxy, 4 nodes running the Tor program, and 2 routers. Once we set up the network, we will set up tinyproxy on the proxy node and Apache2 on the 2 Server nodes.  Then we will have Alice make HTTP requests of the Server1 node directly, through the proxy, and through the Tor network, while we sniff the requests.  The &amp;ldquo;Wide Area&amp;rdquo; should be treated as a cloud of an unknown number of computers and routers, representing a large network where we are just highlighting the nodes used for Tor. We will then analyze this data using Wireshark to determine who is communicating and what they are saying.&lt;/p&gt;

&lt;h1 id=&#34;creating-the-experiment:49601fcc70443e8a9f263221deee393b&#34;&gt;Creating the Experiment&lt;/h1&gt;

&lt;p&gt;Open SSH Secure File Transfer Client&lt;/p&gt;

&lt;p&gt;[[Image(sshclientstart.png)]]&lt;/p&gt;

&lt;p&gt;Click on the Quick Connect Button&lt;/p&gt;

&lt;p&gt;[[Image(sshclientlogon.png)]]&lt;/p&gt;

&lt;p&gt;It should look like this. Click Connect, and enter your password when prompted.  In the right column you should put [attachment:tor_setup.tgz this tar file]&lt;/p&gt;

&lt;p&gt;Then log in to &lt;em&gt;users.isi.deterlab.net&lt;/em&gt; through &lt;a href=&#34;http://www.chiark.greenend.org.uk/~sgtatham/putty/&#34;&gt;Putty.&lt;/a&gt; For help on logging onto Putty check out &lt;a href=&#34;https://trac.deterlab.net/wiki/DETERSSH&#34;&gt;this&lt;/a&gt; tutorial. Move the tar file to &lt;code&gt;/proj/project_name&lt;/code&gt; where project_name is your project&amp;rsquo;s name by typing&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cp tor_setup.tgz /proj/project_name
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then in [attachment:anonymous.2.ns this NS file] replace YOURPROJECT with the name of your project&lt;/p&gt;

&lt;p&gt;[[Image(networksetup.png)]]&lt;/p&gt;

&lt;p&gt;After changing the NS file you are now ready to create your experiment! Log into &lt;a href=&#34;https://www.isi.deterlab.net/&#34;&gt;https://www.isi.deterlab.net/&lt;/a&gt; and use the instructions starting on page 11 &lt;a href=&#34;http://www.isi.edu/deter/docs/DETER_Tutorial-TF-Jan2011.pdf&#34;&gt;http://www.isi.edu/deter/docs/DETER_Tutorial-TF-Jan2011.pdf&lt;/a&gt; to create the experiment. Keep in mind that you already have the NS file, so you will not need to use the graphical tool to create one.  Now you can swap in your experiment! Use the same link page 18 &lt;a href=&#34;http://www.isi.edu/deter/docs/DETER_Tutorial-TF-Jan2011.pdf&#34;&gt;http://www.isi.edu/deter/docs/DETER_Tutorial-TF-Jan2011.pdf&lt;/a&gt; to swap it in.&lt;/p&gt;

&lt;p&gt;If you are experiencing problems dealing with creating the experiment &lt;a href=&#34;https://trac.deterlab.net/wiki/Tutorial/CreatingExperiments&#34;&gt;https://trac.deterlab.net/wiki/Tutorial/CreatingExperiments&lt;/a&gt; also provides a walk through&lt;/p&gt;

&lt;h1 id=&#34;step-2-setting-up-the-network:49601fcc70443e8a9f263221deee393b&#34;&gt;Step 2 Setting Up the Network&lt;/h1&gt;

&lt;h2 id=&#34;setting-up-apache:49601fcc70443e8a9f263221deee393b&#34;&gt;Setting up apache&lt;/h2&gt;

&lt;p&gt;We need to generate traffic in our network and one of the easiest ways to do that is with HTTP traffic, so we need to set up a server and a web page.  SSH into Server1 by using the command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh Server1.ExperimentName.ProjectName
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now run [attachment:runme.apache this script] with the &lt;code&gt;sudo&lt;/code&gt; command. In order to put the script file into the DeterLab environment connect with the SSH File Transfer Client. This will most likely put the script in /users/UserName/ first you must make the command executable, so use the command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;chmod 0755 /users/UserName/runme.apache
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can now run the script using the command&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo /users/UserName/runme.apache
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the code the script contains:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#! /bin/sh

apt-get install apache2

echo &amp;quot;ServerName localhost&amp;quot; | sudo tee /etc/apache2/conf.d/fqdn

echo &amp;quot;#!/usr/bin/env python\nimport cgi\nimport os\n\nprint \&amp;quot;Content-type: text/html\&amp;quot; \nprint \&amp;quot;\&amp;quot; \n\nprint cgi.escape(os.environ[\&amp;quot;REMOTE_ADDR\&amp;quot;])&amp;quot; &amp;gt; /usr/lib/cgi-bin/ip.txt

mv /usr/lib/cgi-bin/ip.txt /usr/lib/cgi-bin/ip.cgi

chmod 755 /usr/lib/cgi-bin/ip.cgi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will run a script with Apache 2 which sets up the server and web page and displays the users IP address on the Server 1 node.  Once the script is done running, the server is now set up and we can generate traffic!  You can check this by typing &lt;code&gt;w3m http://localhost/cgi-bin/ip.cgi&lt;/code&gt; which should display your IP address.
[[Image(apache2setup.png)]]&lt;/p&gt;

&lt;p&gt;It should look like this. Repeat this process on Server 2&lt;/p&gt;

&lt;h2 id=&#34;setting-up-the-proxy-node:49601fcc70443e8a9f263221deee393b&#34;&gt;Setting up the proxy node&lt;/h2&gt;

&lt;p&gt;Log onto the proxy node and use [attachment:runme.proxy this script] with the &lt;code&gt;sudo&lt;/code&gt; command
if you used the SSH Secure File Transfer then the script will most likely be in /users/UserName/ but we still need to make the file executable&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;chmod 755 /users/UserName/runme.proxy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can run the script:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo /users/UserName/runme.proxy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the code the script contains:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#! /bin/sh

apt-get update

apt-get install tinyproxy

apt-get update

echo &amp;quot;Filter \&amp;quot;/etc/tinyproxy/filter\&amp;quot;\nFilterURLs On\nAllow 10.0.0.0/8&amp;quot; &amp;gt;&amp;gt; /etc/tinyproxy.conf

cp /usr/share/tinyproxy/default.html /usr/share/tinyproxy/default.html.ORIGINAL

/etc/init.d/tinyproxy reset
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will run a script which installs and sets up &lt;a href=&#34;https://banu.com/tinyproxy/&#34;&gt;tinyproxy&lt;/a&gt; on the node. Tinyproxy is a free program and is designed to be small and easy to operate. The proxy is now set up!  We&amp;rsquo;ll get to using it in a little while.&lt;/p&gt;

&lt;h1 id=&#34;step-3-generating-and-listening-to-network-traffic:49601fcc70443e8a9f263221deee393b&#34;&gt;Step 3 Generating and Listening to Network Traffic&lt;/h1&gt;

&lt;p&gt;We are now ready to begin learning! [[BR]]
The topics to be covered are
* Understanding what happens when one makes a web server request
* Capturing web traffic using tcpdump
* Analyzing that traffic using wireshark
One person needs to connect to either Alice while another person logs into the server1 node (or server2 if you choose).   From the server node type the command &lt;code&gt;ifconfig&lt;/code&gt; This will show the ethernet links that the node is using.&lt;/p&gt;

&lt;p&gt;[[Image(ifconfig.3.png)]]&lt;/p&gt;

&lt;p&gt;Find the one that shows an inet address of 10.x.x.x In the example above it is eth0. Yours may be different, but that is still ok.&lt;/p&gt;

&lt;h2 id=&#34;direct-client-to-server-traffic:49601fcc70443e8a9f263221deee393b&#34;&gt;Direct Client-to-Server Traffic&lt;/h2&gt;

&lt;p&gt;Then type the command &lt;code&gt;sudo tcpdump -i eth0 -s 0 -x -w /tmp/direct.pcap&lt;/code&gt; This will begin listening to the traffic that comes through this node and that specific ethernet link, eth0 in the example, write the data out to the file direct.pcap in the tmp diretory.  For more help with &lt;code&gt;tcpdump&lt;/code&gt; type in the command &lt;code&gt;man tcpdump&lt;/code&gt;  At this time, the person connected to Alice will enter the command &lt;code&gt;wget --no-proxy http://server1/cgi-bin/ip.cgi&lt;/code&gt; This saves a local copy of the web page set up on the server, and by doing so generates HTTP traffic to examine. We were able to listen in on this traffic thanks to the &lt;code&gt;tcpdump&lt;/code&gt; command. Then the users connected to Server1 will enter the command &lt;code&gt;cp /tmp/direct.pcap .&lt;/code&gt; This will copy the file with the sniffed data into the users directory. We&amp;rsquo;ll analyze what this data looks like and can tell us at a later time. However if you want to analyze this data now before we sniff more, proceed to Step 4 on this page.
[[BR]]To reiterate, the commands are:
* &lt;code&gt;sudo tcpdump -i eth0 -s 0 -x -w /tmp/direct.pcap&lt;/code&gt; from the server
* &lt;code&gt;wget --no-proxy http://server1/cgi-bin/ip.cgi&lt;/code&gt; from Alice
* &lt;code&gt;cp /tmp/direct.pcap .&lt;/code&gt; from the server after closing the tcpdump&lt;/p&gt;

&lt;h2 id=&#34;client-to-server-traffic-through-a-proxy:49601fcc70443e8a9f263221deee393b&#34;&gt;Client-to-Server Traffic through a Proxy&lt;/h2&gt;

&lt;p&gt;Now we&amp;rsquo;ll use a proxy to make this traffic a bit more anonymous.  A proxy will mask the source and destination of the traffic from both the client and the server by working as a go between for the two nodes.  Repeat the &lt;code&gt;tcpdump&lt;/code&gt; command &lt;code&gt;sudo tcpdump -i eth0 -s 0 -x -w /tmp/throughproxy.pcap&lt;/code&gt; However, now the user connected to Alice should enter the command &lt;code&gt;env http_proxy=http://proxy:8888 wget http://server1/cgi-bin/ip.cgi&lt;/code&gt; This command changes an environmental setting and sends the &lt;code&gt;wget&lt;/code&gt; command through the proxy on port 8888.  Thanks to the &lt;code&gt;tcpdump&lt;/code&gt; command, we have a copy of this traffic as well. Then the user on the Server1 node should enter &lt;code&gt;cp /tmp/throughproxy.pcap .&lt;/code&gt; This saves us a copy of the data.
[[BR]]Again, in order:
* &lt;code&gt;sudo tcpdump -i eth0 -s 0 -x -w /tmp/direct.pcap&lt;/code&gt; from the server
* &lt;code&gt;env http_proxy=http://proxy:8888 wget http://server1/cgi-bin/ip.cgi&lt;/code&gt; from Alice
* &lt;code&gt;cp /tmp/direct.pcap .&lt;/code&gt; from the server after closing the tcpdump&lt;/p&gt;

&lt;h2 id=&#34;client-to-server-traffic-through-tor:49601fcc70443e8a9f263221deee393b&#34;&gt;Client-to-Server Traffic through Tor&lt;/h2&gt;

&lt;p&gt;We will now use &lt;a href=&#34;https://www.torproject.org/&#34;&gt;Tor&lt;/a&gt; to
onion route the data. As the name suggests onion routing alters the data flow through a minimum of 3 relays, each adding another layer of anonymity, because the packets of data only know the address of the next relay and the previous relay. Repeat the &lt;code&gt;tcpdump&lt;/code&gt; command &lt;code&gt;sudo tcpdump -i eth0 -s 0 -x -w /tmp/throughtor.pcap&lt;/code&gt;  Now, the user on Alice should use the command &lt;code&gt;torify wget http://server/cgi-bin/ip.cgi&lt;/code&gt; And then &lt;code&gt;cp /tmp/throughtor.pcap .&lt;/code&gt; from the server node.
[[BR]]In order:
* &lt;code&gt;sudo tcpdump -i eth0 -s 0 -x -w /tmp/direct.pcap&lt;/code&gt; from the server
* &lt;code&gt;torify wget http://server1/cgi-bin/ip.cgi&lt;/code&gt; from Alice
* &lt;code&gt;cp /tmp/direct.pcap .&lt;/code&gt; from the server after closing the tcpdump&lt;/p&gt;

&lt;h1 id=&#34;step-4-analyzing-the-traffic-data:49601fcc70443e8a9f263221deee393b&#34;&gt;Step 4 Analyzing the Traffic Data&lt;/h1&gt;

&lt;p&gt;So now we have collected HTTP network traffic data from 3 different connections: direct, through a proxy, and through the Tor network.  Now, it&amp;rsquo;s time to analyze that data.  We will do this using &lt;a href=&#34;http://www.wireshark.org/&#34;&gt;Wireshark&lt;/a&gt;.  Wireshark is a network packet analyzer, it takes captured packets (or captures its own) and then analyzes and displays the data in the packets.  Displaying the information allows the Wireshark user to ensure that no harmful communication is being used against the system or to even spy on a system.  To access this data we need to use the SSH Secure File Transfer Client&lt;/p&gt;

&lt;p&gt;[[Image(sshclientstart.png)]]&lt;/p&gt;

&lt;p&gt;Click on the Quick Connect Button&lt;/p&gt;

&lt;p&gt;[[Image(sshclientlogon.png)]]&lt;/p&gt;

&lt;p&gt;It should look like this. Click Connect, and enter your password when prompted.  In the right column, you should see three files: direct.pcap, throughproxy.pcap, and throughtor.pcap. Copy these files and place them on your desktop.  Then open up Wireshark.&lt;/p&gt;

&lt;p&gt;[[Image(wireshark.png)]]&lt;/p&gt;

&lt;p&gt;Click on the File tab, and click Open. Find the 3 data files on your desktop and open up direct.pcap.&lt;/p&gt;

&lt;p&gt;[[Image(wiresharkdirect.png)]]&lt;/p&gt;

&lt;p&gt;It should look similar to this.  When you look at lines 1 and 2, you will see that this is the ARP request coming from Router2 looking for Server1.  The ARP request is a request for the ethernet address of a node, using the IP address. After that, you will see that lines 3 and 4 are the the TCP requests from Alice to the Server1.  After that in line 6 we see the HTTP request, this is requesting the actual page from the Apache2 server. Let&amp;rsquo;s check out the source and destination information from the HTTP data packets.  We can see that the in the source column and down to line 6 that the source of the HTTP request is 10.1.4.2, which corresponds to the Alice node IP address, and the destination in the destination column is 10.1.1.2, which corresponds to the Server1 node&amp;rsquo;s IP address. This makes it clear that Alice was making an HTTP request to Server1.&lt;/p&gt;

&lt;p&gt;[[Image(Regular Dataflow.png)]]&lt;/p&gt;

&lt;p&gt;Now open up throughproxy.pcap in Wireshark.&lt;/p&gt;

&lt;p&gt;[[Image(wiresharkthroughproxy.png)]]&lt;/p&gt;

&lt;p&gt;What we see is much different, we see that the source is 10.1.3.4, which is the IP address of the proxy node.  So, now the destination, Server1, doesn&amp;rsquo;t know that the request came from Alice, but instead thinks that the request came from the proxy node.&lt;/p&gt;

&lt;p&gt;[[Image(Proxy Dataflow.png)]]&lt;/p&gt;

&lt;p&gt;Now, we try it with the throughtor.pcap file.&lt;/p&gt;

&lt;p&gt;[[Image(wiresharkthroughtor.png)]]&lt;/p&gt;

&lt;p&gt;Again we see that the source is not Alice, but instead matches the IP address from one of the Tor Relay nodes.  It won&amp;rsquo;t always be the same every time because the path that the data takes through the Tor network is random.  This, like going through the proxy, provides anonymity for the client, in our case Alice, but this provides more anonymity because the data goes through 3 Tor relays instead of just one proxy.&lt;/p&gt;

&lt;p&gt;[[Image(Tor Dataflow.png)]]&lt;/p&gt;

&lt;p&gt;This may provide for anonymous communication, but it doesn&amp;rsquo;t keep the data secure.  We might not know who the data came from, but we can still tell what it was. Open up one of the .pcap files.&lt;/p&gt;

&lt;p&gt;[[Image(readwireshark.png)]]&lt;/p&gt;

&lt;p&gt;Highlight one of the HTTP packets, then expand the Hypertext Transfer Protocol section. Here we can read that the command &lt;code&gt;wget&lt;/code&gt; and the user was trying to access &lt;code&gt;http://server1/cgi-bin/ip.cgi&lt;/code&gt; So, even though the server doesn&amp;rsquo;t know where the request came from, we still know what the command is.&lt;/p&gt;

&lt;h1 id=&#34;more-on-your-own:49601fcc70443e8a9f263221deee393b&#34;&gt;More on Your Own&lt;/h1&gt;

&lt;p&gt;If you want to explore this some more, you can use &lt;code&gt;tcpdump&lt;/code&gt; and Wireshark on more than just the server node. When using the proxy to send data, you can use it on the Alice node and the proxy node to determine what each knows about the source and destination of the packets. If you&amp;rsquo;re using Tor, then you can use it on the Alice node and the Tor Relays to determine what they all know about the packets. After you&amp;rsquo;ve done some of that, which anonymity tool do you think is the best at keeping users anonymous?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/BotnetExample/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/BotnetExample/</guid>
      <description>

&lt;p&gt;A worm infects some vulnerable hosts, they organize into a P2P botnet with some botmaster and start exchanging C&amp;amp;C traffic. Experimenter wants to observe the evolution of the botnet and the amount of traffic that master receives. There are two classes of experiments here that need to be combined together:
    a. an experiment where worm spreads and infects vulnerable hosts
    b. an experiment where some hosts organize into P2P network and somehow elect a leader who then sends commands to them and they may send reports back&lt;/p&gt;

&lt;h1 id=&#34;example-1-botnet:047fbe5fdb045045c26808c44256919d&#34;&gt;Example 1: Botnet&lt;/h1&gt;

&lt;p&gt;This example used two metadescriptions. Let&amp;rsquo;s go through each of them. This example is written in [CurrentlyProposedLanguage].&lt;/p&gt;

&lt;h2 id=&#34;worm-spread-metadescription:047fbe5fdb045045c26808c44256919d&#34;&gt;Worm spread metadescription&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;define Worm:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Logical topology:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Objects:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;VNode extends Node

VNode :Vulnerable, Vulnerability vulnerability = x}

INode :Infected}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Cardinality:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;|INode|,,&amp;gt;=1,,

|VNode|,,&amp;gt;=1,,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Relationships:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;*Timeline of events: *&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Definitions:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; each Inode i, some VNode v:

   e1 :SCAN, origin v, vulnerability = x }

   s1 :Infected}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Timeline:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   e1 -&amp;gt; if (e1.vulnerability == v.vulnerability) then s1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Invariants:&lt;/em&gt; No additional ones are needed here.&lt;/p&gt;

&lt;h2 id=&#34;p2p-w-leader-and-c-c-traffic-metadescription:047fbe5fdb045045c26808c44256919d&#34;&gt;P2P w leader and C&amp;amp;C traffic metadescription&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;define P2P:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Logical topology:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Objects:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Peer extends Node

Peer :{}, Leader leader = none }

Leader extends Peer

Leader :{}  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Cardinality:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;|Peer|,,&amp;gt;=2,,

|Leader|,,&amp;gt;=1,,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Relationships:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;*Timeline of events: *&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Definitions:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PEERREQUEST extends REQUEST

PEERREPLY extends REPLY

each Peer peer1, some Peer peer2: 

  e1 :PEERREQUEST, origin peer2}

  e2 :PEERREPLY, origin peer1}

  s1 := {peer2.peers += peer1}

  s2 := {peer2.peers += peer1}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;each Peer x:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  e3 :LEADERIS, origin x, Leader yourleader = leader}

  s3 :leader}

  e4 :HELLO, origin x.leader} 

  e5 :CMD, origin x, String cmd = c} 

  e6 :REPORT, origin x, String report = r} 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Timeline:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  e1 -&amp;gt; [s1 and (e2 | matches(e2,e1)) -&amp;gt; s2] | | e3 -&amp;gt; s3 -&amp;gt; e4 -&amp;gt; e5 -&amp;gt; [e6]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Invariants:&lt;/em&gt; No additional ones are needed here.&lt;/p&gt;

&lt;h2 id=&#34;experiment-design:047fbe5fdb045045c26808c44256919d&#34;&gt;Experiment design&lt;/h2&gt;

&lt;p&gt;Now I&amp;rsquo;m a user who wants to design my experiment. I need to combine two metadescriptions and somehow tie them down to generator choices. To combine I need to specify how outputs of worm metadescription match inputs of P2P metadescription. I&amp;rsquo;ll do something like this:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;define Botnet: import Worm w, P2P p2p&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Logical topology:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Objects:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;each p2p.Peer p and each w.Infected i

    p := i
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Cardinality:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Relationships:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;*Timeline of events: *&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Definitions:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Timeline:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; timeline(w) | | timeline(p2p)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Invariants:&lt;/em&gt; No additional ones are needed here.&lt;/p&gt;

&lt;p&gt;i.e. each infected host becomes a peer.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/BnFnotation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/BnFnotation/</guid>
      <description>&lt;p&gt;metadescription&amp;gt; ::= declaration dimensions&lt;/p&gt;

&lt;p&gt;declaration ::= &lt;em&gt;define&lt;/em&gt; identifier &amp;ldquo;:&amp;rdquo;&lt;/p&gt;

&lt;p&gt;dimensions ::= dimension {dimensions}&lt;/p&gt;

&lt;p&gt;dimension ::= logtopo | evtimeline&lt;/p&gt;

&lt;p&gt;logtopo ::= &lt;em&gt;topology&lt;/em&gt; objects cardinality relationships&lt;/p&gt;

&lt;p&gt;evtimeline ::= &lt;em&gt;timeline&lt;/em&gt; definitions timeline invariants&lt;/p&gt;

&lt;p&gt;objects ::= &lt;em&gt;objects&lt;/em&gt; object {object}&lt;/p&gt;

&lt;p&gt;object ::= alias | dobject&lt;/p&gt;

&lt;p&gt;alias ::= obname &amp;ldquo;.&amp;rdquo; obfield&lt;/p&gt;

&lt;p&gt;dobject ::= obtype [obname] &amp;ldquo;:=&amp;rdquo; &amp;ldquo;{&amp;rdquo; obass &amp;ldquo;}&amp;rdquo;&lt;/p&gt;

&lt;p&gt;obass ::= obass [&amp;ldquo;,&amp;rdquo; obass]&lt;/p&gt;

&lt;p&gt;obass ::= obvar | obstate&lt;/p&gt;

&lt;p&gt;obvar ::= obtype obname [&amp;ldquo;=&amp;rdquo; value]&lt;/p&gt;

&lt;p&gt;obstate ::= state &amp;ldquo;=&amp;rdquo; value&lt;/p&gt;

&lt;p&gt;obname ::= identifier&lt;/p&gt;

&lt;p&gt;obtype from list of object types&lt;/p&gt;

&lt;p&gt;value ::= number | string&lt;/p&gt;

&lt;p&gt;identifier ::=  letter { letter | digit }&lt;/p&gt;

&lt;p&gt;letter
diggit
number
string&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/CachePoisonExample/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/CachePoisonExample/</guid>
      <description>

&lt;p&gt;The attacker poisons a DNS cache to take over authority for a given domain. The attacker then creates a phishing page and tries to steal user&amp;rsquo;s usernames/passwords. There are two classes of experiments that need to be combined:
    a. an experiment where a DNS cache is poisoned, subclass of cache poisoning experiments
    b. an experiment where a phishing attack is conducted via a Web page to steal usernames/passwords&lt;/p&gt;

&lt;h1 id=&#34;example-2-dns-cache-poisoning-for-phishing:0010c1ad8cf7f7fc6dffa9efcc792eb5&#34;&gt;Example 2: DNS cache poisoning for phishing&lt;/h1&gt;

&lt;p&gt;This example used two metadescriptions. Let&amp;rsquo;s go through each of them. This example is written in [CurrentlyProposedLanguage].&lt;/p&gt;

&lt;h2 id=&#34;cache-poisoning-metadescription:0010c1ad8cf7f7fc6dffa9efcc792eb5&#34;&gt;Cache poisoning metadescription&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;define cachePoisoning:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Logical topology:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*Objects:*

  Attacker extends Node

  Name, fakeResource extends String

  Cache extends Object

  Cache := {String[] records}

*Cardinality:*

  |Attacker|,,1,,

  |Name|,,1,,

  |fakeResource|,,1,,

  |Cache|,,1,,

*Relationships:*

  not collocated(Cache, Attacker)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;*Timeline of events: *&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Definitions:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Attacker a, Cache c, Name n, fakeResource fr

e1 :REPLY, origin c, content = (n=fr)}

s1 := {c.records += (n=fr)} 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Timeline:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;e1 -&amp;gt; s1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Invariants:&lt;/em&gt;    Nothing in addition to the topology and timeline above.&lt;/p&gt;

&lt;h2 id=&#34;dns-cache-poisoning-metadescription:0010c1ad8cf7f7fc6dffa9efcc792eb5&#34;&gt;DNS Cache poisoning metadescription&lt;/h2&gt;

&lt;p&gt;This is a special case of cache poisoning where the target is DNS cache.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;define DNSCachePoisoning: import cachePoisoning cp&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Logical topology:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Objects:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Auth extends Node

(Name extends DNSName, Name := cp.Name, fakeIP extends IPAddress, FakeIP := cp.fakeResource) xor

(Name extends DNSName, domain(Name) := cp.Name, fakeAuth extends DNSName,  fakeAuth := cp.fakeResource)

RealIP extends IPAddress

victimCache extends Object, victimCache := cp.Cache

victimCache := {DNSRecord[] records}

authCache extends Object

authCache :{Name=RealIP, auth(domain(Name)) = Auth}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Cardinality:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;|Auth|,,1,,

|RealIP|,,1,,

|authCache|,,1,,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Relationships:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;not collocated(victimCache, Auth)

collocated(authCache, Auth)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;*Timeline of events: *&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Definitions:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DNSREQUEST extends REQUEST

DNSREPLY extends REPLY

Attacker att, Auth auth, Name n, FakeIP fIP, fakeAuth fauth, RealIP rIP, victimCache vc, authCache ac

  e1 :DNSREQUEST, origin vc, content = IP(n)?}

  e2 :DNSREQUEST, origin auth, content = IP(n)?}

  e3 :DNSREPLY, origin vc, content = {n=rIP}}

  e4 :DNSREPLY, origin vc, content = {n=unknown}}

  e5 :DNSREPLY, origin vc, content fakeAuth}}

  s1 :fakeAuth)}

  e6 :DNSREPLY, origin vc, content = {n=fIP}}

  s2 :=  cp.s1, s1 := {vc.records += (n=fIP)}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Timeline:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  e1 -&amp;gt; e2 -&amp;gt; (e5 | matches(e5,e2) -&amp;gt; s1 -&amp;gt; e4 xor e6 | matches(e6, e2) -&amp;gt; s2 -&amp;gt; e3) 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Invariants:&lt;/em&gt;    Nothing in addition to the topology and timeline above.&lt;/p&gt;

&lt;h2 id=&#34;confidential-access-metadescription:0010c1ad8cf7f7fc6dffa9efcc792eb5&#34;&gt;Confidential access metadescription&lt;/h2&gt;

&lt;p&gt;The phishing attempt is essentially same as presenting a valid page to the user that asks for confidential info - it&amp;rsquo;s just that the location of that page is not as user expected.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;define confidentialAccess:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Logical topology:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Objects:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  User extends Human

  Server extends webServer

  Page extends webPage

  Public, Confidential extends String
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Cardinality:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;|User|,,1,,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;   |Server|,,1,,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;|Page|,,&amp;gt;=1,,

|Public|,,1,,

|Confidential|,,1,,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Relationships:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;   collocated(Page, Server)&lt;/p&gt;

&lt;p&gt;*Timeline of events: *&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Definitions:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;User u, Server s, Public p, Confidential c, Page wp

  e1 :WEBREQUEST, origin s, content = url(wp)}

  e2 :WEBREQUEST, origin u, content = (public?, confidential?)}

  e3 :WEBREPLY, origin s, content = (public=x, confidential=y)}

  e4 :WEBREPLY, origin u, content = wp}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Timeline:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  e1 -&amp;gt; e2 -&amp;gt; e3 -&amp;gt; if (x # p and y c) then e4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Invariants:&lt;/em&gt;    Nothing in addition to the topology and timeline above.&lt;/p&gt;

&lt;h2 id=&#34;experiment-design:0010c1ad8cf7f7fc6dffa9efcc792eb5&#34;&gt;Experiment design&lt;/h2&gt;

&lt;p&gt;Now I&amp;rsquo;m a user who wants to design an experiment. I need to combine two metadescriptions (DNS cache poisoning and phishing) and somehow tie them down to generator choices. To combine I&amp;rsquo;ll do something like this:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;lsquo;define Phishing: import DNSCachePoisoning dcp, confidentialAccess ca&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Logical topology:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Objects:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dcp.FakeIP := ip(ca.Server)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Cardinality:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Relationships:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;*Timeline of events: *&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Definitions:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Timeline:&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  timeline(dcp) -&amp;gt; timeline(ca)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Invariants:&lt;/em&gt;    Nothing in addition to the topology and timeline above.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/CamelCase/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/CamelCase/</guid>
      <description>

&lt;p&gt;New words created by smashing together capitalized words.&lt;/p&gt;

&lt;p&gt;CamelCase is the original wiki convention for creating hyperlinks, with the additional requirement that the capitals are followed by a lower-case letter; hence “AlabamA” and “ABc” will not be links.&lt;/p&gt;

&lt;h1 id=&#34;customizing-the-wiki-behavior:ee0c7f1adff97de93e273b2a6365e778&#34;&gt;Customizing the Wiki behavior&lt;/h1&gt;

&lt;p&gt;Some people dislike linking by CamelCase.  While Trac remains faithful to the original Wiki style, it provides a number of ways to accomodate users with different preferences:
* There&amp;rsquo;s an option (&lt;code&gt;ignore_missing_pages&lt;/code&gt; in the [wiki:TracIni#wiki-section &amp;ldquo;[wiki]&amp;ldquo;] section of TracIni) to simply ignore links to missing pages when the link is written using the CamelCase style, instead of that word being replaced by a gray link followed by a question mark.[[BR]]
   That can be useful when CamelCase style is used to name code artifacts like class names and there&amp;rsquo;s no corresponding page for them.
* There&amp;rsquo;s an option (&lt;code&gt;split_page_names&lt;/code&gt; in the  [wiki:TracIni#wiki-section &amp;ldquo;[wiki]&amp;ldquo;] section of TracIni) to automatically insert space characters between the words of a CamelCase link when rendering the link.
* Creation of explicit Wiki links is also easy, see WikiPageNames for details.
* In addition, Wiki formatting can be disabled completely in some places (e.g. when rendering commit log messages). See &lt;code&gt;wiki_format_messages&lt;/code&gt; in the [wiki:TracIni#changeset-section &amp;ldquo;[changeset]&amp;ldquo;] section of TracIni.&lt;/p&gt;

&lt;p&gt;See TracIni for more information on the available options.&lt;/p&gt;

&lt;h1 id=&#34;more-information-on-camelcase:ee0c7f1adff97de93e273b2a6365e778&#34;&gt;More information on CamelCase&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://c2.com/cgi/wiki?WikiCase&#34;&gt;http://c2.com/cgi/wiki?WikiCase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/CamelCase&#34;&gt;http://en.wikipedia.org/wiki/CamelCase&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;See also: WikiPageNames, WikiNewPage, WikiFormatting, TracWiki&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/CentOSImage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/CentOSImage/</guid>
      <description>

&lt;h1 id=&#34;centos-images-at-deter:643973f5900f493d6e180cee39c719ed&#34;&gt;CentOS Images at DETER&lt;/h1&gt;

&lt;h2 id=&#34;centos5:643973f5900f493d6e180cee39c719ed&#34;&gt;CentOS5&lt;/h2&gt;

&lt;p&gt;This is currently at CentOS 5.7.  We support CentOS instead of Fedora because of the longer term of support offered for CentOS.  The CentOS 5 image is a whole disk image with linux installed on partition 1.  This is different from the Emulab tradition of putting Linux on partition 2.&lt;/p&gt;

&lt;h2 id=&#34;centos6-64-std:643973f5900f493d6e180cee39c719ed&#34;&gt;CentOS6-64-STD&lt;/h2&gt;

&lt;p&gt;CentOS 6.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/ClassResourceLimits/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/ClassResourceLimits/</guid>
      <description>

&lt;h1 id=&#34;what-are-resource-limits:7bb2e621c260edd8b7b8790aa22b02e6&#34;&gt;What are resource limits?&lt;/h1&gt;

&lt;p&gt;If you are a class user, your class only have access to a limited number of nodes. You can see how many nodes are available for your class on your My DETERlab page.&lt;/p&gt;

&lt;h1 id=&#34;what-error-message-will-i-receive-if-there-are-no-nodes-left-for-my-project:7bb2e621c260edd8b7b8790aa22b02e6&#34;&gt;What error message will I receive if there are no nodes left for my project?&lt;/h1&gt;

&lt;p&gt;Something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Admission Control: $project/$experiment has too many nodes allocated!
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;maximum-node-usage:7bb2e621c260edd8b7b8790aa22b02e6&#34;&gt;Maximum Node Usage&lt;/h1&gt;

&lt;p&gt;Each class is limited to a portion of its max required nodes for the duration of an assignment. This portion should be around &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;4&lt;/sub&gt;-&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt; for large classes and around &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt; for small ones. Instructors are asked to set this limit by clicking on the &amp;ldquo;Teaching&amp;rdquo; tab of their &amp;ldquo;My DETERlab&amp;rdquo; page, and then clicking in the &amp;ldquo;Input Schedule&amp;rdquo; box under &amp;ldquo;Class Projects&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Collectively all classes will be limited to &lt;sup&gt;2&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt; of the maximum capacity of the testbed at all times (which is to say: 330 nodes).&lt;/p&gt;

&lt;h1 id=&#34;rationale:7bb2e621c260edd8b7b8790aa22b02e6&#34;&gt;Rationale&lt;/h1&gt;

&lt;p&gt;DETERlab has 500 nodes (physical PCs) split between ISI in Marina del Rey and UC Berkeley. They are our most scarce resource.&lt;/p&gt;

&lt;p&gt;In order to provide fair access to nodes to all users of the testbed (researchers and classes alike), we impose limits on the maximum number of nodes available to classes.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/ClassSupport/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/ClassSupport/</guid>
      <description>&lt;p&gt;Classes use DeterLab differently than researchers do. Both groups can use DeterLab&amp;rsquo;s full range of tools and resources, but we limit the amount of accidental sharing students do and assign them accounts that we can reuse. In order to do that we need your help in keeping track of who is using DeterLab for your classes and broadly what resources you will be using. The details are below.&lt;/p&gt;

&lt;p&gt;If you run into a problem when using DeterLab in your classes please let us know. If you come up with a better solution than the ones we described below we&amp;rsquo;d really like to hear about it!&lt;/p&gt;

&lt;p&gt;[wiki:CourseSetup#setup Course Setup] - what we need from you&lt;/p&gt;

&lt;p&gt;[wiki:CourseSetup#wrapup  Course Wrap-Up] - actions to take at the end of your course&lt;/p&gt;

&lt;p&gt;[wiki:CourseSetup#handoff  Course Hand-Off] - how to have a different instructor reuse the same course at your institution&lt;/p&gt;

&lt;p&gt;[wiki:CourseSetup#manage Managing Your Course] - how add/remove students, unfreeze accounts, add assignments, etc.&lt;/p&gt;

&lt;p&gt;[wiki:CourseSetup#ac  Access Control] - changes we made to the testbed to enforce students&amp;rsquo; individual work&lt;/p&gt;

&lt;p&gt;[wiki:CourseSetup#rl  Resource Limits] - fair sharing&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/Classes/CodeChanges/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/Classes/CodeChanges/</guid>
      <description>&lt;p&gt;General&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There is one course per project.&lt;/li&gt;
&lt;li&gt;The project_head is the primary instructor&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Anybody with group_root permission is assumed to be a TA&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;Instructors and TA&amp;rsquo;s are allowed to sudo to any student on the ops node&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Instructors may sudo to a TA but not conversely.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code changes&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;The instacct utility (described below) has a function which generates an include file
 for sudo which is copied to the ops node and installed as /usr/local/etc/sudoers.classes.
 The function is run either by explicit request on the command line, or as a side-effect
 when students are assigned to a class, and at the end of the semester when a class is wiped.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Experiment Permissions&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When an experiment is created in the default group, only the
 student&amp;rsquo;s home directory and /proj/&lt;PID&gt;/exp/&lt;EID&gt; are exported to the
 nodes in the experiment.&lt;/p&gt;

&lt;p&gt;If the experiment is created in a subgroup of the main project, normal
 export permissions already isolate students from others (except for those
 in the group). /proj directory exports are applied as above.&lt;/p&gt;

&lt;p&gt;The ssh public keys of the instructor and TA&amp;rsquo;s are put into the
 root .ssh/authorized_keys file so that the instructors can log
 into any node to grade the experiment (as class exercise) or
 debug it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code changes&lt;/strong&gt;: tmcd&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Web Interface&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Instructors and TA&amp;rsquo;s are allowed to Freeze, Thaw and SU-as a student
 and edit a student&amp;rsquo;s profile.  When an instructor &lt;code&gt;removes&lt;/code&gt; a class
 account from the project, instead of actually removing it, it recycles the account.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code changes&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;www/user_defs.php defines new routines InstructedBy() and CourseAcct(),
 referenced in delete_user.php3 moduserinfo.php3 showuser.php3 suuser.php3.
 There are perl versions of these in db/User.pm.in.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Recyclable student accounts&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Student accounts are not created in the normal manner (create
 an account, apply to join an existing project) - instead:&lt;/p&gt;

&lt;p&gt;A stem is chosen for the project, say in the case of the
 project USC558L, sc558, and then a number of accounts are
 generated of the form sc558[a-z][a-z] as many are need
 to accommodate the students in the class.&lt;/p&gt;

&lt;p&gt;The instructor provides a list of email address, and
 one account is assigned per email address.&lt;/p&gt;

&lt;p&gt;At the end of the semester, the student accounts are wiped -
 all experiments headed by the student are terminated, all files
 underneath the students home directory are deleted, the passwords
 changed to something random, all public ssh keys and ssl certs
 recorded in the database are flushed and then randomly regenerated
 as in a new account.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code changes&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;The source for the instacct utility was added to the tree as&lt;/p&gt;

&lt;p&gt;testbed/account/instacct.in, manage_class.in&lt;/p&gt;

&lt;p&gt;The separate perl script manage_class gets installed on the ops node
 to invoke an sslxmlrpc call so that instructors may do almost anything
 that a testbed adminstrator could do.&lt;/p&gt;

&lt;p&gt;The two commands reserved to admins are to set the stem for class names, and to generate
 a number of accounts in advance that are ready to assign - in the same state
 a previously used and wiped account as in.&lt;/p&gt;

&lt;p&gt;Since our funders require us to provide usage goals and metrics, we track
 the number of student accounts which were generated, (re-)assigned and wiped
 by means of a couple of additional tables in the database:&lt;/p&gt;

&lt;p&gt;project_history and project_attributes.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Other peculiarities of student accounts&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Student accounts may not join other projects.&lt;/p&gt;

&lt;p&gt;A student may be taking more than one course and only have
 one (student) email address; we added a couple of warts to deal
 with this -&lt;/p&gt;

&lt;p&gt;There is an ancillary table in the database called email_aliases;
 and when the account is assigned the .forward is set to this&lt;br /&gt;
 and the students email becomes e.g. sc558ab@users.isi.deterlab.net&lt;/p&gt;

&lt;p&gt;So, for all users, students or not, we require web login by uid only
 and not email address.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code changes&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;account/tbacct.in was changed so that when it generates a .forward
 file, the email_aliases entry preempts the usr_email in the users table.&lt;/p&gt;

&lt;p&gt;An unresolved bug is letting an instructor correct a students email, now that
 it is kept in a separate place.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/Classes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/Classes/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://trac.deterlab.net/wiki/ClassesSpring2013&#34;&gt;https://trac.deterlab.net/wiki/ClassesSpring2013&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/ClassesFall2010/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/ClassesFall2010/</guid>
      <description>&lt;p&gt;Here is the list of classes along with their info for Fall 2010:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;UCLA / [project:UCLAClass]

&lt;ul&gt;
&lt;li&gt;# students: 50&lt;/li&gt;
&lt;li&gt;# assignments: 5&lt;/li&gt;
&lt;li&gt;due dates: These dates aren&amp;rsquo;t firm, but the plan is currently to have assignments due October 8, October 15, October 29, November 5, and November 12.&lt;/li&gt;
&lt;li&gt;time to do the assignment: 2 w, 2 w, 2 w, 1 w, 1 w, 1 w&lt;/li&gt;
&lt;li&gt;number of machines: 50, 100, 50, 50, 200, 50&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;USC / [project:USCCSci530]

&lt;ul&gt;
&lt;li&gt;# students: 90 - 120&lt;/li&gt;
&lt;li&gt;# machines: 3-5 per assignment, depending on the assignment&lt;/li&gt;
&lt;li&gt;# assignments: 3-4 substansive, 1 initial familiarization&lt;/li&gt;
&lt;li&gt;due dates: substansive Oct - late Nov, initial mid-September&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;SMC / [project:SMC-CS78]

&lt;ul&gt;
&lt;li&gt;# students: 45 (capped and firm)&lt;/li&gt;
&lt;li&gt;# machines 3-5 per assignment, depending on the assignment; students do assignments individually&lt;/li&gt;
&lt;li&gt;# assignments: 3 substansive, 1 initial familiarization&lt;/li&gt;
&lt;li&gt;due dates: Oct - late Dec, initial mid-late September&lt;/li&gt;
&lt;li&gt;due dates are estimates, might end up juggled, advanced, or delayed&lt;/li&gt;
&lt;li&gt;Time to do each assignment: 1 week&lt;/li&gt;
&lt;li&gt;Class date range: 8/30/10-12/21/10&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Vanderbilt University [project:VandyCS285] - deadlines on Tuesdays

&lt;ul&gt;
&lt;li&gt;When is class offered: Fall 2010&lt;/li&gt;
&lt;li&gt;Project name on DETER: VandyCS285&lt;/li&gt;
&lt;li&gt;Expected number of students: 15&lt;/li&gt;
&lt;li&gt;# Assignments: 2&lt;/li&gt;
&lt;li&gt;First assignment given: Nov 1&lt;/li&gt;
&lt;li&gt;Time to do the assignment: 16 days&lt;/li&gt;
&lt;li&gt;Machines needed: 50 (at least 3 per student)&lt;/li&gt;
&lt;li&gt;Second assignment given: Nov 18&lt;/li&gt;
&lt;li&gt;Time to do the assignment: 3 weeks&lt;/li&gt;
&lt;li&gt;Machines needed: 80 (8 per group of 4 students)&lt;/li&gt;
&lt;li&gt;Class ends: Dec 09.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Colorado State / [project:ColoState356]

&lt;ul&gt;
&lt;li&gt;When is class offered: Fall 2010&lt;/li&gt;
&lt;li&gt;Project name on DETER: ColoState356&lt;/li&gt;
&lt;li&gt;Expected number of students: 40&lt;/li&gt;
&lt;li&gt;# Assignments: 6, roughly every two weeks&lt;/li&gt;
&lt;li&gt;First assignment given: late-august   - this is a warm-up to get accounts and start using DETER&lt;/li&gt;
&lt;li&gt;Time to do the assignment: 1 week&lt;/li&gt;
&lt;li&gt;Machines needed: 40 (one per student)&lt;/li&gt;
&lt;li&gt;Subsequent assignments given: roughly two weeks between assignments&lt;/li&gt;
&lt;li&gt;Time to do the assignment: 2 weeks&lt;/li&gt;
&lt;li&gt;Machines needed: 40 (3 per group of 3 students)&lt;/li&gt;
&lt;li&gt;Class ends: December 17th&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;University of Portland

&lt;ul&gt;
&lt;li&gt;When is class offered: Fall 2010&lt;/li&gt;
&lt;li&gt;Project name on DETER: CS448 University of Portland&lt;/li&gt;
&lt;li&gt;Expected number of students: 30&lt;/li&gt;
&lt;li&gt;# Assignments: 3&lt;/li&gt;
&lt;li&gt;First assignment given: September 28&lt;/li&gt;
&lt;li&gt;Time to do the assignment: 1 day&lt;/li&gt;
&lt;li&gt;Machines needed: 30 (one per student)&lt;/li&gt;
&lt;li&gt;Second assignment given: September 30&lt;/li&gt;
&lt;li&gt;Time to do the assignment: 1 week&lt;/li&gt;
&lt;li&gt;Machines needed: 30 (2 per group of 2 students)&lt;/li&gt;
&lt;li&gt;Third assignment given: November 9&lt;/li&gt;
&lt;li&gt;Time to do the assignment: 2 weeks&lt;/li&gt;
&lt;li&gt;Machines needed: 60 nodes (4 per group of 2 students)&lt;/li&gt;
&lt;li&gt;Class ends: Dec 16&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Youngstown State University / [project:YSU-secure]

&lt;ul&gt;
&lt;li&gt;# students: 50, two sections of 25 each (upper bound)&lt;/li&gt;
&lt;li&gt;# machines: not sure yet&lt;/li&gt;
&lt;li&gt;# assignments: one assignment to start but maybe another if the first one works out&lt;/li&gt;
&lt;li&gt;# due dates: second week of November&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;SJSU / [project:SJSUCMPE209]

&lt;ul&gt;
&lt;li&gt;When is class offered: Fall 2010&lt;/li&gt;
&lt;li&gt;Project name on DETER: SJSUCMPE209&lt;/li&gt;
&lt;li&gt;Expected number of students: 45&lt;/li&gt;
&lt;li&gt;# Assignments: 3&lt;/li&gt;
&lt;li&gt;First assignment given: early September&lt;/li&gt;
&lt;li&gt;Time to do the assignment: 2 weeks&lt;/li&gt;
&lt;li&gt;Machines needed: 20&lt;/li&gt;
&lt;li&gt;Second assignment given: late September&lt;/li&gt;
&lt;li&gt;Time to do the assignment: 2 weeks&lt;/li&gt;
&lt;li&gt;Machines needed: 20&lt;/li&gt;
&lt;li&gt;Third assignment given: early October&lt;/li&gt;
&lt;li&gt;Time to do the assignment: 2 weeks&lt;/li&gt;
&lt;li&gt;Machines needed: 20&lt;/li&gt;
&lt;li&gt;Class ends: Dec. 9, 2010&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Stevens Institute of Technology [project:SecSystems]

&lt;ul&gt;
&lt;li&gt;When is class offered: Fall 2010&lt;/li&gt;
&lt;li&gt;Project name on DETER: CS577Stevens&lt;/li&gt;
&lt;li&gt;Expected number of students: 10&lt;/li&gt;
&lt;li&gt;# Assignments: ~14 (12 short ones + 2 projects)&lt;/li&gt;
&lt;li&gt;First assignment given: early September&lt;/li&gt;
&lt;li&gt;Time to do the assignment: 1 week for the short ones, 4-8 weeks for the projects&lt;/li&gt;
&lt;li&gt;Machines needed: 30 (10 per group of 3 students)&lt;/li&gt;
&lt;li&gt;Class ends: December 16, 2010&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Johns Hopkins University [project:ENG695-423]

&lt;ul&gt;
&lt;li&gt;When is class offered: Fall 2010&lt;/li&gt;
&lt;li&gt;Expected number of students: 13&lt;/li&gt;
&lt;li&gt;# Assignments: 1 for each of 4 teams&lt;/li&gt;
&lt;li&gt;First assignment given: October 2010&lt;/li&gt;
&lt;li&gt;Time to do the assignment: 10 weeks&lt;/li&gt;
&lt;li&gt;Machines needed: 24 (approximately 6 per team)&lt;/li&gt;
&lt;li&gt;Class ends: Dec 9&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/ClassesFall2011/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/ClassesFall2011/</guid>
      <description>&lt;p&gt;Here is the list of classes with their info for Fall 2011:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;USC / (project:USC558L)

&lt;ul&gt;
&lt;li&gt;Expected number of students: 30&lt;/li&gt;
&lt;li&gt;# Assignments: 5&lt;/li&gt;
&lt;li&gt;First assignment given: Aug. 24th&lt;/li&gt;
&lt;li&gt;Time to do the assignment: 1 week&lt;/li&gt;
&lt;li&gt;Machines needed: 30&lt;/li&gt;
&lt;li&gt;Second assignment Aug. 31&lt;/li&gt;
&lt;li&gt;Time to do the assignment: 2 weeks&lt;/li&gt;
&lt;li&gt;Machines needed: 30 (3 per group, ~10 groups)&lt;/li&gt;
&lt;li&gt;Third assignment Sept. 7th&lt;/li&gt;
&lt;li&gt;Time to do the assignment: 2 weeks&lt;/li&gt;
&lt;li&gt;Machines needed: 100 (10 per group, ~10 groups)&lt;/li&gt;
&lt;li&gt;Fourth assignment Sept. 21st&lt;/li&gt;
&lt;li&gt;Time to do the assignment: 2 weeks&lt;/li&gt;
&lt;li&gt;Machines needed: 80 (8 per group, ~10 groups)&lt;/li&gt;
&lt;li&gt;Fifth assignment Oct. 1st&lt;/li&gt;
&lt;li&gt;Time to do the assignment: 2 weeks&lt;/li&gt;
&lt;li&gt;Machines needed: 40 (4 per group, ~10 groups, plus 1 NetFPGA node per group)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;UCS / (project:USCCSci530)

&lt;ul&gt;
&lt;li&gt;Expected number of students: 60&lt;/li&gt;
&lt;li&gt;# Assignments: 4&lt;/li&gt;
&lt;li&gt;First assignment given: week of &lt;sup&gt;10&lt;/sup&gt;&amp;frasl;&lt;sub&gt;17&lt;/sub&gt;&lt;/li&gt;
&lt;li&gt;Time to do the assignment: 1 week&lt;/li&gt;
&lt;li&gt;Machines needed: 300 (5 per student)&lt;/li&gt;
&lt;li&gt;Second assignment given:week of &lt;sup&gt;10&lt;/sup&gt;&amp;frasl;&lt;sub&gt;31&lt;/sub&gt;&lt;/li&gt;
&lt;li&gt;Time to do the assignment: 1 week&lt;/li&gt;
&lt;li&gt;Machines needed: 300 (5 per student)&lt;/li&gt;
&lt;li&gt;Third assignment given: week of &lt;sup&gt;11&lt;/sup&gt;&amp;frasl;&lt;sub&gt;7&lt;/sub&gt;&lt;/li&gt;
&lt;li&gt;Time to do the assignment: 1 week&lt;/li&gt;
&lt;li&gt;Machines needed: 300 (5 per student)&lt;/li&gt;
&lt;li&gt;Fourth assignment given: week of &lt;sup&gt;11&lt;/sup&gt;&amp;frasl;&lt;sub&gt;14&lt;/sub&gt;&lt;/li&gt;
&lt;li&gt;Time to do the assignment: 1 week&lt;/li&gt;
&lt;li&gt;Machines needed: 60 (1 per student)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;CSU / (project:ColoState356)

&lt;ul&gt;
&lt;li&gt;Expected number of students: 40&lt;/li&gt;
&lt;li&gt;# Assignments: 5&lt;/li&gt;
&lt;li&gt;First assignment given: August 23&lt;/li&gt;
&lt;li&gt;Time to do the assignment: 2 weeks&lt;/li&gt;
&lt;li&gt;Machines needed: 40 (one per student) due Sept 6th - UCLA Exercise&lt;/li&gt;
&lt;li&gt;Second assignment given: September 6th&lt;/li&gt;
&lt;li&gt;Time to do the assignment: 2 weeks&lt;/li&gt;
&lt;li&gt;Machines needed: 160 (4 machines,  40 students) due Sept 20th - DNSSEC Moodle exercise&lt;/li&gt;
&lt;li&gt;Third assignment given: September 20th&lt;/li&gt;
&lt;li&gt;Time to do the assignment: 2 weeks&lt;/li&gt;
&lt;li&gt;Machines needed: 200 (5 machines, 40 students) due Oct 4th - SYN Flood Moodle Exercise&lt;/li&gt;
&lt;li&gt;Fourth assignment given:   October 11&lt;/li&gt;
&lt;li&gt;Time to do the assignment: 3 weeks&lt;/li&gt;
&lt;li&gt;Machines needed: 200 (5 machines, 40 students) due Nov 1st - NIDS Moodle Exercise&lt;/li&gt;
&lt;li&gt;Fifth assignment given: November 8th&lt;/li&gt;
&lt;li&gt;Time to do the assignment: 4 weeks  (3 weeks + fall break)&lt;/li&gt;
&lt;li&gt;Machines needed: 200 (5 machines,  40 students) due Dec 6th - Buffer Overflow Moodle Exercise&lt;/li&gt;
&lt;li&gt;Class ends: December 12th&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;CSU / (project:ColoState556)

&lt;ul&gt;
&lt;li&gt;Expected number of students: 35&lt;/li&gt;
&lt;li&gt;# Assignments: 5&lt;/li&gt;
&lt;li&gt;First assignment given: 1st week of September&lt;/li&gt;
&lt;li&gt;Time to do the assignment: 2 weeks&lt;/li&gt;
&lt;li&gt;Machines needed: 70 (two per student)&lt;/li&gt;
&lt;li&gt;Second assignment given: 3rd week of September&lt;/li&gt;
&lt;li&gt;Time to do the assignment: 2 weeks&lt;/li&gt;
&lt;li&gt;Machines needed: 160 (4 per student)&lt;/li&gt;
&lt;li&gt;Third assignment given: 2nd week of October&lt;/li&gt;
&lt;li&gt;Time to do the assignment: 3 weeks&lt;/li&gt;
&lt;li&gt;Machines needed: 240 (6 per student)&lt;/li&gt;
&lt;li&gt;Fourth assignment given: 4th week of October&lt;/li&gt;
&lt;li&gt;Time to do the assignment: 3 weeks&lt;/li&gt;
&lt;li&gt;Machines needed 240 (6 per student)&lt;/li&gt;
&lt;li&gt;Fifth assignment given: 3rd week of November&lt;/li&gt;
&lt;li&gt;Time to do the assignment: 3 weeks&lt;/li&gt;
&lt;li&gt;Machines needed: 240 (6 per student)&lt;/li&gt;
&lt;li&gt;Classes end: December 17, 2011&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Lehigh/ (project:CSE343)

&lt;ul&gt;
&lt;li&gt;Expected number of students: 12&lt;/li&gt;
&lt;li&gt;# Assignments: 2&lt;/li&gt;
&lt;li&gt;First assignment given: mid-Oct&lt;/li&gt;
&lt;li&gt;Time to do the assignment: 2 weeks&lt;/li&gt;
&lt;li&gt;Machines needed: 22 (11 machines per group - 2 groups doing simultaneously)&lt;/li&gt;
&lt;li&gt;Second assignment given: mid-Oct&lt;/li&gt;
&lt;li&gt;Time to do the assignment: 2 weeks&lt;/li&gt;
&lt;li&gt;Machines needed: 15 (5 machines per group - 3 groups doing simultaneously)&lt;/li&gt;
&lt;li&gt;Classes end: December 10, 2011&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;YSU (project:YSU-secure)

&lt;ul&gt;
&lt;li&gt;Expected number of students: 22&lt;/li&gt;
&lt;li&gt;# Assignments: 1&lt;/li&gt;
&lt;li&gt;First assignment given: mid-october&lt;/li&gt;
&lt;li&gt;Time to do the assignment: 1 week (October 31, - November 4)&lt;/li&gt;
&lt;li&gt;Time to do DEMO assignment: 1 week (November 28, - December 2)&lt;/li&gt;
&lt;li&gt;Machines needed: 55 (5 machines per group of two students)&lt;/li&gt;
&lt;li&gt;Class ends: December 16&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;YSU (project:YSU-secure-G)

&lt;ul&gt;
&lt;li&gt;Expected number of students: 6&lt;/li&gt;
&lt;li&gt;# Assignments: 1&lt;/li&gt;
&lt;li&gt;First assignment given: mid-november&lt;/li&gt;
&lt;li&gt;Time to do assignment: 2 weeks (November 21, - December 2)&lt;/li&gt;
&lt;li&gt;Machines needed: 24 (4 machines per student)&lt;/li&gt;
&lt;li&gt;Class ends: December 16&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;JHU (project:EN695-423)

&lt;ul&gt;
&lt;li&gt;Expected number of students: 24&lt;/li&gt;
&lt;li&gt;# Assignments: 2&lt;/li&gt;
&lt;li&gt;First assignment given: October&lt;/li&gt;
&lt;li&gt;Time to do the assignment: 4 weeks&lt;/li&gt;
&lt;li&gt;Machines needed: 48 (two per student)&lt;/li&gt;
&lt;li&gt;Second assignment given: November&lt;/li&gt;
&lt;li&gt;Time to do the assignment: 5 weeks&lt;/li&gt;
&lt;li&gt;Machines needed: 48 (8 per group of 4 students)&lt;/li&gt;
&lt;li&gt;Class ends: Dec 9&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;WIP (project:ece579s)

&lt;ul&gt;
&lt;li&gt;Expected number of students: 12&lt;/li&gt;
&lt;li&gt;# Assignments: 3&lt;/li&gt;
&lt;li&gt;First assignment given: mid September&lt;/li&gt;
&lt;li&gt;Time to do the assignment: 2 weeks&lt;/li&gt;
&lt;li&gt;Machines needed: 12 (one per student)&lt;/li&gt;
&lt;li&gt;Second assignment given: Oct 1st&lt;/li&gt;
&lt;li&gt;Time to do the assignment: 2 weeks&lt;/li&gt;
&lt;li&gt;Machines needed: 12 (one per student)&lt;/li&gt;
&lt;li&gt;Third assignment given: October 17th&lt;/li&gt;
&lt;li&gt;Time to do the assignment: 2 weeks&lt;/li&gt;
&lt;li&gt;Machines needed: 12 (one per student)&lt;/li&gt;
&lt;li&gt;Class ends: Dec 16th&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Stevens (project:SecSystems)

&lt;ul&gt;
&lt;li&gt;Expected number of students: 16&lt;/li&gt;
&lt;li&gt;# Assignments: 12&lt;/li&gt;
&lt;li&gt;First assignment given: Sep 8&lt;/li&gt;
&lt;li&gt;Time to do the assignment: 1 weeks&lt;/li&gt;
&lt;li&gt;Machines needed: 20-30 (1-3 per student)&lt;/li&gt;
&lt;li&gt;Assignments given weekly&lt;/li&gt;
&lt;li&gt;Class ends: ?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;BGSU (project:Forensics)

&lt;ul&gt;
&lt;li&gt;When is class offered: Fall 2011&lt;/li&gt;
&lt;li&gt;Project name on DETERLab: CS&lt;/li&gt;
&lt;li&gt;Number of students: 20&lt;/li&gt;
&lt;li&gt;# Assignments: 2&lt;/li&gt;
&lt;li&gt;First assignment given: late-September&lt;/li&gt;
&lt;li&gt;Time to do the assignment: 2 weeks&lt;/li&gt;
&lt;li&gt;Machines needed: 20 (one per student)&lt;/li&gt;
&lt;li&gt;Second assignment given: end of September&lt;/li&gt;
&lt;li&gt;Time to do the assignment: 2 weeks&lt;/li&gt;
&lt;li&gt;Machines needed: 30 (3 per group of 2 students)&lt;/li&gt;
&lt;li&gt;Class ends: Dec 23&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;UCLA (project:UCLAClass)

&lt;ul&gt;
&lt;li&gt;Expected number of students: 45&lt;/li&gt;
&lt;li&gt;# of assignments: 6&lt;/li&gt;
&lt;li&gt;First assignment given:Early October&lt;/li&gt;
&lt;li&gt;Time to do assignment: two weeks&lt;/li&gt;
&lt;li&gt;Machines needed:  1 per student&lt;/li&gt;
&lt;li&gt;Second assignment given:Early October&lt;/li&gt;
&lt;li&gt;Time to do assignment: two weeks&lt;/li&gt;
&lt;li&gt;Machines needed:  1 per student&lt;/li&gt;
&lt;li&gt;Third assignment given:Mid October&lt;/li&gt;
&lt;li&gt;Time to do assignment: two weeks&lt;/li&gt;
&lt;li&gt;Machines needed:  2 per student&lt;/li&gt;
&lt;li&gt;Fourth assignment given:Early November&lt;/li&gt;
&lt;li&gt;Time to do assignment: two weeks&lt;/li&gt;
&lt;li&gt;Machines needed:  1 per student&lt;/li&gt;
&lt;li&gt;Fifth assignment given:Early November&lt;/li&gt;
&lt;li&gt;Time to do assignment: two weeks&lt;/li&gt;
&lt;li&gt;Machines needed:  4 per student&lt;/li&gt;
&lt;li&gt;Sixth assignment given: Mid November&lt;/li&gt;
&lt;li&gt;Time to do assignment: two weeks&lt;/li&gt;
&lt;li&gt;Machines needed:  1 per student&lt;/li&gt;
&lt;li&gt;Class ends:  December 9&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;SMC (project: SMC-CS78)

&lt;ul&gt;
&lt;li&gt;First assignment given: &lt;sup&gt;10&lt;/sup&gt;&amp;frasl;&lt;sub&gt;17&lt;/sub&gt;&lt;/li&gt;
&lt;li&gt;Time to do the assignment: 1 week&lt;/li&gt;
&lt;li&gt;Machines needed: 100 (5 per student)&lt;/li&gt;
&lt;li&gt;Second assignment given: &lt;sup&gt;10&lt;/sup&gt;&amp;frasl;&lt;sub&gt;24&lt;/sub&gt;&lt;/li&gt;
&lt;li&gt;Time to do the assignment: 1 week&lt;/li&gt;
&lt;li&gt;Machines needed: 100 (5 per student)&lt;/li&gt;
&lt;li&gt;Third assignment given: &lt;sup&gt;11&lt;/sup&gt;&amp;frasl;&lt;sub&gt;28&lt;/sub&gt;&lt;/li&gt;
&lt;li&gt;Time to do the assignment: 1 week&lt;/li&gt;
&lt;li&gt;Machines needed: 25 (1 per student)&lt;/li&gt;
&lt;li&gt;Fourth assignment given: &lt;sup&gt;12&lt;/sup&gt;&amp;frasl;&lt;sub&gt;5&lt;/sub&gt;&lt;/li&gt;
&lt;li&gt;Time to do the assignment: 1 week&lt;/li&gt;
&lt;li&gt;Machines needed: 100 (5 per student)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;GMU (project: HandsOnLabs)

&lt;ul&gt;
&lt;li&gt;Expected number of students: 24&lt;/li&gt;
&lt;li&gt;# Assignments: 6&lt;/li&gt;
&lt;li&gt;First assignment: 1 September&lt;/li&gt;
&lt;li&gt;Time to do the assignment: 1 weeks&lt;/li&gt;
&lt;li&gt;Machines needed: 24 (one per student)&lt;/li&gt;
&lt;li&gt;Second assignment: 8 September&lt;/li&gt;
&lt;li&gt;Time to do the assignment: 3 weeks&lt;/li&gt;
&lt;li&gt;Machines needed: 24 (One per student)&lt;/li&gt;
&lt;li&gt;Third Assignment: 29 September&lt;/li&gt;
&lt;li&gt;Time to do the assignment: 3 weeks&lt;/li&gt;
&lt;li&gt;Machines needed: 24 (8 groups of 3 students)&lt;/li&gt;
&lt;li&gt;Fourth Assignment: 20 October&lt;/li&gt;
&lt;li&gt;Time to do the assignment: 3 weeks&lt;/li&gt;
&lt;li&gt;Machines needed: 24 (8 groups of 3 students)&lt;/li&gt;
&lt;li&gt;Fifth Assignment: 10 Novenmber&lt;/li&gt;
&lt;li&gt;Time to do the assignment: 3 weeks&lt;/li&gt;
&lt;li&gt;Machines needed: 24 (8 groups of 3 students)&lt;/li&gt;
&lt;li&gt;Sixth Assignment: 1 December&lt;/li&gt;
&lt;li&gt;Time to do the assignment: 2 weeks&lt;/li&gt;
&lt;li&gt;Machines needed : 24&lt;/li&gt;
&lt;li&gt;Class ends: December 15&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Vanderbilt / (project:VandyCS285)

&lt;ul&gt;
&lt;li&gt;Expected number of students: 21&lt;/li&gt;
&lt;li&gt;# Assignments: 1&lt;/li&gt;
&lt;li&gt;First assignment given: End of Oct&lt;/li&gt;
&lt;li&gt;Time to do the assignment: 2 weeks&lt;/li&gt;
&lt;li&gt;Machines needed: 30-40 (3 per group of 2)&lt;/li&gt;
&lt;li&gt;Class ends: Dec 08&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>